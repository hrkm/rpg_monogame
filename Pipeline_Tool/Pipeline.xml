<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pipeline</name>
    </assembly>
    <members>
        <member name="M:MonoGame.Tools.Pipeline.History.AddProjectHistory(System.String)">
            <summary>
            If the project already exists in history, it will be moved to the end.
            </summary>
        </member>
        <member name="M:MonoGame.Tools.Pipeline.Program.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:MGCB.MGBuildParser">
            <summary>
            Adapted from this generic command line argument parser:
            http://blogs.msdn.com/b/shawnhar/archive/2012/04/20/a-reusable-reflection-based-command-line-parser.aspx     
            </summary>
        </member>
        <member name="M:MonoGame.Tools.Pipeline.IController.OnProjectModified">
            <summary>
            Notify controller that a property of Project or its contents has been modified.
            </summary>
        </member>
        <member name="M:MonoGame.Tools.Pipeline.IController.OnReferencesModified">
            <summary>
            Notify controller that Project.References has been modified.
            </summary>
        </member>
        <member name="P:MonoGame.Tools.Pipeline.IController.Templates">
            <summary>
            Types of content which can be created and added to a project. 
            </summary>
        </member>
        <member name="P:MonoGame.Tools.Pipeline.IController.ProjectOpen">
            <summary>
            True if there is a project.
            </summary>
        </member>
        <member name="P:MonoGame.Tools.Pipeline.IController.ProjectDirty">
            <summary>
            True if the project has unsaved changes.
            </summary>
        </member>
        <member name="P:MonoGame.Tools.Pipeline.IController.ProjectBuilding">
            <summary>
            True if the project is actively building.
            </summary>
        </member>
        <member name="P:MonoGame.Tools.Pipeline.IController.LaunchDebugger">
            <summary>
            Passes /launchdebugger option when launching MGCB.
            </summary>
        </member>
        <member name="P:MonoGame.Tools.Pipeline.IController.View">
            <summary>
            The view this controller is attached to.
            </summary>
        </member>
        <member name="E:MonoGame.Tools.Pipeline.IController.OnProjectLoading">
            <summary>
            Triggered when the project starts loading.
            </summary>
        </member>
        <member name="E:MonoGame.Tools.Pipeline.IController.OnProjectLoaded">
            <summary>
            Triggered when the project finishes loading.
            </summary>
        </member>
        <member name="E:MonoGame.Tools.Pipeline.IController.OnBuildStarted">
            <summary>
            Triggered when the project finishes building.
            </summary>
        </member>
        <member name="E:MonoGame.Tools.Pipeline.IController.OnBuildFinished">
            <summary>
            Triggered when the project finishes building.
            </summary>
        </member>
        <member name="M:MonoGame.Tools.Pipeline.PipelineController.AskSaveProject">
            <summary>
            Prompt the user if they wish to save the project.
            Save it if yes is chosen.
            Return true if yes or no is chosen.
            Return false if cancel is chosen.
            </summary>
        </member>
        <member name="T:MonoGame.Tools.Pipeline.PipelineController.ActionStack">
            <summary>
            Represents a stack of undo/redo-able actions.
            </summary>
        </member>
        <member name="T:MonoGame.Tools.Pipeline.ProcessorConverter">
            <summary>
            Custom converter for the Processor property of a ContentItem.
            </summary>
        </member>
        <member name="T:MonoGame.Tools.Pipeline.ImporterConverter">
            <summary>
            Custom converter for the Processor property of a ContentItem.
            </summary>
        </member>
        <member name="T:MonoGame.Tools.Pipeline.ContentItemState">
            <summary>
            Snapshot of a ContentItem's state, used for undo/redo.
            </summary>
        </member>
        <member name="M:MonoGame.Tools.Pipeline.ContentItemState.Get(MonoGame.Tools.Pipeline.ContentItem)">
            <summary>
            Create a ContentItemState storing member values of the passed ContentItem.
            </summary>        
        </member>
        <member name="M:MonoGame.Tools.Pipeline.ContentItemState.Apply(MonoGame.Tools.Pipeline.ContentItem)">
            <summary>
            Set a ContentItem's member values from this state object.
            </summary>
        </member>
        <member name="T:MonoGame.Tools.Pipeline.ProjectState">
            <summary>
            Snapshot of a PipelineProject's state, used for undo/redo.
            </summary>
        </member>
        <member name="M:MonoGame.Tools.Pipeline.ProjectState.Get(MonoGame.Tools.Pipeline.PipelineProject)">
            <summary>
            Create a ProjectState storing member values of the passed PipelineProject.
            </summary>        
        </member>
        <member name="M:MonoGame.Tools.Pipeline.ProjectState.Apply(MonoGame.Tools.Pipeline.PipelineProject)">
            <summary>
            Set a PipelineProject's member values from this state object.
            </summary>
        </member>
        <member name="M:MonoGame.Tools.Pipeline.Util.GetRelativePath(System.String,System.String)">
            <summary>        
            Returns the path 'filspec' made relative path 'folder'.
            
            If 'folder' is not an absolute path, throws ArgumentException.
            If 'filespec' is not an absolute path, returns 'filespec' unmodified.
            </summary>
        </member>
        <member name="T:MonoGame.Tools.Pipeline.MultiTargetPropertyDescriptor">
            <summary>
            PropertyDescriptor for delegating get/set calls to more than one component (object).
            </summary>
        </member>
        <member name="T:MonoGame.Tools.Pipeline.OpaqueDataDictionaryElementPropertyDescriptor">
            <summary>
            PropertyDescriptor for a named item within an OpaqueDataDictionary.
            </summary>
        </member>
        <member name="T:MonoGame.Tools.Pipeline.ReadonlyPropertyDescriptor">
            <summary>
            PropertyDescriptor which has a fixed value.
            </summary>
        </member>
        <member name="T:FolderSelect.FolderSelectDialog">
            <summary>
            Wraps System.Windows.Forms.OpenFileDialog to make it present
            a vista-style dialog.
            </summary>
        </member>
        <member name="M:FolderSelect.FolderSelectDialog.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:FolderSelect.FolderSelectDialog.ShowDialog">
            <summary>
            Shows the dialog
            </summary>
            <returns>True if the user presses OK else false</returns>
        </member>
        <member name="M:FolderSelect.FolderSelectDialog.ShowDialog(System.IntPtr)">
            <summary>
            Shows the dialog
            </summary>
            <param name="hWndOwner">Handle of the control to be parent</param>
            <returns>True if the user presses OK else false</returns>
        </member>
        <member name="P:FolderSelect.FolderSelectDialog.InitialDirectory">
            <summary>
            Gets/Sets the initial folder to be selected. A null value selects the current directory.
            </summary>
        </member>
        <member name="P:FolderSelect.FolderSelectDialog.Title">
            <summary>
            Gets/Sets the title to show in the dialog
            </summary>
        </member>
        <member name="P:FolderSelect.FolderSelectDialog.FileName">
            <summary>
            Gets the selected folder
            </summary>
        </member>
        <member name="T:FolderSelect.WindowWrapper">
            <summary>
            Creates IWin32Window around an IntPtr
            </summary>
        </member>
        <member name="M:FolderSelect.WindowWrapper.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Handle to wrap</param>
        </member>
        <member name="P:FolderSelect.WindowWrapper.Handle">
            <summary>
            Original ptr
            </summary>
        </member>
        <member name="T:FolderSelect.Reflector">
             <summary>
             This class is from the Front-End for Dosbox and is used to present a 'vista' dialog box to select folders.
             Being able to use a vista style dialog box to select folders is much better then using the shell folder browser.
             http://code.google.com/p/fed/
            
             Example:
             var r = new Reflector("System.Windows.Forms");
             </summary>
        </member>
        <member name="M:FolderSelect.Reflector.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ns">The namespace containing types to be used</param>
        </member>
        <member name="M:FolderSelect.Reflector.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="an">A specific assembly name (used if the assembly name does not tie exactly with the namespace)</param>
            <param name="ns">The namespace containing types to be used</param>
        </member>
        <member name="M:FolderSelect.Reflector.GetType(System.String)">
            <summary>
            Return a Type instance for a type 'typeName'
            </summary>
            <param name="typeName">The name of the type</param>
            <returns>A type instance</returns>
        </member>
        <member name="M:FolderSelect.Reflector.New(System.String,System.Object[])">
            <summary>
            Create a new object of a named type passing along any params
            </summary>
            <param name="name">The name of the type to create</param>
            <param name="parameters"></param>
            <returns>An instantiated type</returns>
        </member>
        <member name="M:FolderSelect.Reflector.Call(System.Object,System.String,System.Object[])">
            <summary>
            Calls method 'func' on object 'obj' passing parameters 'parameters'
            </summary>
            <param name="obj">The object on which to excute function 'func'</param>
            <param name="func">The function to execute</param>
            <param name="parameters">The parameters to pass to function 'func'</param>
            <returns>The result of the function invocation</returns>
        </member>
        <member name="M:FolderSelect.Reflector.Call2(System.Object,System.String,System.Object[])">
            <summary>
            Calls method 'func' on object 'obj' passing parameters 'parameters'
            </summary>
            <param name="obj">The object on which to excute function 'func'</param>
            <param name="func">The function to execute</param>
            <param name="parameters">The parameters to pass to function 'func'</param>
            <returns>The result of the function invocation</returns>
        </member>
        <member name="M:FolderSelect.Reflector.CallAs(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Calls method 'func' on object 'obj' which is of type 'type' passing parameters 'parameters'
            </summary>
            <param name="type">The type of 'obj'</param>
            <param name="obj">The object on which to excute function 'func'</param>
            <param name="func">The function to execute</param>
            <param name="parameters">The parameters to pass to function 'func'</param>
            <returns>The result of the function invocation</returns>
        </member>
        <member name="M:FolderSelect.Reflector.CallAs2(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Calls method 'func' on object 'obj' which is of type 'type' passing parameters 'parameters'
            </summary>
            <param name="type">The type of 'obj'</param>
            <param name="obj">The object on which to excute function 'func'</param>
            <param name="func">The function to execute</param>
            <param name="parameters">The parameters to pass to function 'func'</param>
            <returns>The result of the function invocation</returns>
        </member>
        <member name="M:FolderSelect.Reflector.Get(System.Object,System.String)">
            <summary>
            Returns the value of property 'prop' of object 'obj'
            </summary>
            <param name="obj">The object containing 'prop'</param>
            <param name="prop">The property name</param>
            <returns>The property value</returns>
        </member>
        <member name="M:FolderSelect.Reflector.GetAs(System.Type,System.Object,System.String)">
            <summary>
            Returns the value of property 'prop' of object 'obj' which has type 'type'
            </summary>
            <param name="type">The type of 'obj'</param>
            <param name="obj">The object containing 'prop'</param>
            <param name="prop">The property name</param>
            <returns>The property value</returns>
        </member>
        <member name="M:FolderSelect.Reflector.GetEnum(System.String,System.String)">
            <summary>
            Returns an enum value
            </summary>
            <param name="typeName">The name of enum type</param>
            <param name="name">The name of the value</param>
            <returns>The enum value</returns>
        </member>
        <member name="F:MonoGame.Tools.Pipeline.MainView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MonoGame.Tools.Pipeline.MainView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MonoGame.Tools.Pipeline.MainView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MonoGame.Tools.Pipeline.NewContentDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MonoGame.Tools.Pipeline.NewContentDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MonoGame.Tools.Pipeline.NewContentDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MonoGame.Tools.Pipeline.AssemblyReferenceListEditForm">
            <summary>
            Modal dialog for editing individual lines within PipelineProject.References.
            </summary>
        </member>
        <member name="T:MonoGame.Tools.Pipeline.AssemblyReferenceListEditor">
            <summary>
            Custom editor for a the References property of a PipelineProject.
            </summary>    
        </member>
        <member name="T:MonoGame.Tools.Pipeline.PipelineProjectProxy">
            <summary>
            Wraps a PipelineProject object, defining its appearance within the windows specific IView (MainView).
            </summary>
        </member>
        <member name="T:MonoGame.Tools.Pipeline.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MonoGame.Tools.Pipeline.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MonoGame.Tools.Pipeline.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
